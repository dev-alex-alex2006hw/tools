//******************************************************************
//
// Copyright 2014 Samsung Electronics All Rights Reserved.
//
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=



#if !defined(_IRESOURCERESPONSELISTENER_H)
#define _IRESOURCERESPONSELISTENER_H

#include "CMConfig.h"
#include "CMError.h"
#include "Connector/HeadersList.h"



// Forward Declarations...
namespace OC
{
    namespace Cm
    {
        namespace Serialization
        {
            class ISerializable ;
        }
    }
}

namespace OC
{
    namespace Cm
    {
        namespace Client
        {
            namespace Resource
            {
                /**
                *  @addtogroup Resource
                *  @{
                */
                /**
                 *
                 * @interface   IResourceResponseListener
                 * @brief       Listener to receive response of Control Manager requests
                 *
                 * @since       1.0
                 *
                 * This interface provides listener methods to receive response of Control Manager requests which are sent
                 * using OC::Cm::Client::Resource::Resource class.
                 *
                 * Application developers must have the knowledge of input and output data format of Control Manager requests.
                 * Then only they can properly type cast the response data.
                 *
                 * Application needs to type cast the response data to corresponding data class generated by
                 * Control Manager-SDK. Control Manager-SDK also generates resource specific controllers and status listeners. It is advisable to use
                 * these resource specific controllers and interfaces to avoid type casting
                 *
                 * @code
                 *
                 * @endcode
                 *
                 */
                class CMAPI IResourceResponseListener
                {

                    public:
                        /**
                         *  Default destructor of this class.
                         */
                        virtual ~IResourceResponseListener() {}


                        /**
                         * listener to receive response of Get request
                         *
                         * @param[in] requestId id of the request to which current response belongs
                         * @param[in] status    Status code of the response
                         * @param[in] headers   response headers
                         * @param[in] response  response data
                         *
                         * @see OC::Cm::Client::Resource::Resource::get()
                         */
                        virtual void OnGetResponseReceived(int requestId, int status,
                                                           OC::Cm::Connector::HeadersList &headers,  OC::Cm::Serialization::ISerializable *response) = 0;

                        /**
                         * listener to receive response of put request
                         *
                         * @param[in] requestId id of the request to which current response belongs
                         * @param[in] status    Status code of the response
                         * @param[in] headers   response headers
                         * @param[in] response  response data
                         *
                         * @see OC::Cm::Client::Resource::Resource::put()
                         */
                        virtual void OnPutResponseReceived(int requestId, int status,
                                                           OC::Cm::Connector::HeadersList &headers, OC::Cm::Serialization::ISerializable *response) = 0;

                        /**
                         * listener to receive response of post request
                         *
                         * @param[in] requestId id of the request to which current response belongs
                         * @param[in] status    Status code of the response
                         * @param[in] headers   response headers
                         * @param[in] response  response data
                         *
                         * @see OC::Cm::Client::Resource::Resource::post()
                         */
                        virtual void OnPostResponseReceived(int requestId, int status,
                                                            OC::Cm::Connector::HeadersList &headers,  OC::Cm::Serialization::ISerializable *response) = 0;

                        /**
                         * listener to receive response of delete resource request
                         *
                         * @param[in] requestId id of the request to which current response belongs
                         * @param[in] status    Status code of the response
                         * @param[in] headers   response headers
                         * @param[in] response  response data
                         *
                         * @see OC::Cm::Client::Resource::Resource::deleteResource()
                         */
                        virtual void onDeleteResponseReceived(int requestId, int status,
                                                              OC::Cm::Connector::HeadersList &headers, OC::Cm::Serialization::ISerializable *response) = 0;

                        /**
                         * listener to receive response of subscribe notification request
                         *
                         * @param[in] requestId id of the request to which current response belongs
                         * @param[in] status    Status code of the response
                         * @param[in] subscriptionUri   Subscription URI
                         *
                         * @see OC::Cm::Client::Resource::Resource::subscribe()
                         */
                        virtual void onSubscribeResponseReceived( int requestId, int status,
                                std::string &subscriptionUri ) = 0;


                        /**
                         * listener to receive response of unsubscribe notification request
                         *
                         * @param[in] requestId id of the request to which current response belongs
                         * @param[in] status    Status code of the response
                         *
                         * @see OC::Cm::Client::Resource::Resource::unsubscribe()
                         */
                        virtual void onUnSubscribeResponseReceived(int requestId, int status ) = 0;


                        /**
                         * Error callback for Control Manager Requests sent using OC::Cm::Client::Resource::Resource class.
                         *
                         * @param[in] requestId     Represents id of the request to which current response belongs
                         * @param[in] status        Represents status code of error received
                         * @param[in] error         Represents error object which contains detailed error information
                         * @param[in] errorMessage  Represents error object received from server
                         */
                        virtual void onErrorReceived( int requestId, int status, OC::Cm::CMError error,
                                                      OC::Cm::Serialization::ISerializable *errorMessage ) = 0;


                        /**
                         * callback which indicates the completion of processing Control Manager Requests sent using OC::Cm::Client::Resource::Resource class.
                         *
                         * @param[in] requestId id of the request to which current response belongs
                         * @param[in] requestPayload    HTTP Request data
                         * @param[in] responsePayload   HTTP Response data
                         */
                        virtual void onRequestComplete(int requestId, std::string requestPayload,
                                                       std::string responsePayload) = 0;

                };
                /** @} */
            }
        }
    }
}



#endif  //_IRESOURCERESPONSELISTENER_H
