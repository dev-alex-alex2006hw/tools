//******************************************************************
//
// Copyright 2014 Samsung Electronics All Rights Reserved.
//
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=



#if !defined(_RESOURCE_H)
#define _RESOURCE_H



// Forward Declarations...
namespace OC
{
    namespace Cm
    {
        namespace Client
        {
            namespace Resource
            {
                class IResourceResponseListener ;

                class INotificationListener ;
            }
        }

        namespace Serialization
        {
            class ISerializable ;
        }
    }
}

#include "map"
#include "string"
#include "CMConfig.h"
#include "IContext.h"
#include "CMError.h"

namespace OC
{
    namespace Cm
    {
        namespace Client
        {
            namespace Resource
            {
                /**
                *  @addtogroup Resource
                *  @{
                */
                /**
                 * @class       Resource
                 * @brief       This class provide methods to control a resource.
                 *
                 * @since       1.0
                 *
                 * This class provide methods to control a resource. Using this class application can control
                 * any resource.
                 *
                 * To use this class, application developer must have the knowledge of Control Manager protocol. Application
                 * developers must have the knowledge of input and output data format of Control Manager requests. Then only
                 * they can use proper data classes with these APIs.
                 *
                 * It is advisable to use Resource specific controller classes which are derived from this class.
                 * These classes will be generated by Control Manager SDK.
                 *
                 * @code
                 *
                 * @endcode
                 *
                 */
                class CMAPI Resource
                {

                    public:

                        /**
                         * Constructor to create a resource instance
                         *
                         * @param[in] context       context of framework using which this request needs to be sent
                         * @param[in] protocol      communication protocol to be used
                         * @param[in] deviceAddress     address of the device
                         * @param[in] resourcePath      resource path
                         */
                        Resource(IContext *context, std::string protocol, std::string &deviceAddress,
                                 std::string &resourcePath);

                        /**
                         * Constructor to create a resource instance
                         *
                         * @param[in] context       context of framework using which this request needs to be sent
                         * @param[in] protocol      communication protocol to be used
                         * @param[in] deviceAddress     address of the device
                         * @param[in] resourcePath      resource path
                         */
                        Resource(IContext *context, std::string protocol, std::string &deviceAddress,
                                 const std::string &resourcePath);

                        /**
                         * Constructor to create a resource instance. This constructor won't configure resource path.
                         * Developer must configure resource path using buildTemplatePath method or setResourcePath method
                         *
                         * @param[in] context       context of framework using which this request needs to be sent
                         * @param[in] protocol      communication protocol to be used
                         * @param[in] deviceAddress     address of the device
                         *
                         * @see OC::Cm::Client::Resource::Resource::buildTemplatePath
                         * @see OC::Cm::Client::Resource::Resource::setResourcePath
                         */
                        Resource(IContext *context, std::string protocol, std::string &deviceAddress );

                        /**
                         * Default destructor of this classk
                         */
                        ~Resource();

                        /**
                         * Builds and configures resource path using template path.
                         * Template path will use path templates and values of these path templates will be passed to this
                         * function as const char* parameters \n
                         *
                         * Example template path : /devices/{deviceID}/information. \n
                         * In above example {deviceID} is path template
                         *
                         * to build /device/0/information, invoke this function as below \n
                         * buildTemplatePath("/device/{deviceID}/information", "0") ;
                         *
                         * @param[in] pathTemplate      resource path with path templates
                         *
                         * @see OC::Cm::Client::Resource::Resource::buildTemplatePath
                         * @see OC::Cm::Client::Resource::Resource::setResourcePath
                         */
                        void buildTemplatePath( const char *pathTemplate, ... ) ;


                        /**
                         * This method sends Get request to the resource. This is an asynchronous method. Response of
                         * this request can be received through
                         * OC::Cm::Client::Resource::IResourceResponseListener::OnGetResponseReceived()
                         *
                         * @param[out] requestId request identifier
                         * @param[in] queryParams   query parameters
                         * @param[in] listener      response listener
                         *
                         * @return returns OC::Cm::CMError object with code CM_SUCCESS on success @n
                         *                 OC::Cm::CMError object with error code, error description if available on failure
                         *
                         *
                         * @see OC::Cm::Client::Resource::IResourceResponseListener::OnGetResponseReceived()
                         */
                        OC::Cm::CMError get( int &requestId, std::map<std::string, std::string> *queryParams,
                                             OC::Cm::Client::Resource::IResourceResponseListener &listener);



                        /**
                         * This method sends Put request to the resource. This is an asynchronous method. Response of
                         * this request can be received through
                         * OC::Cm::Client::Resource::IResourceResponseListener::OnPutResponseReceived()
                         *
                         * @param[out] requestId    request identifier
                         * @param[in]  queryParams  query parameters
                         * @param[in]  data         request payload
                         * @param[in]  listener     response listener
                         *
                         * @return returns OC::Cm::CMError object with code CM_SUCCESS on success @n
                         *                 OC::Cm::CMError object with error code, error description if available on failure
                         *
                         * @see OC::Cm::Client::Resource::IResourceResponseListener::OnPutResponseReceived()
                         */
                        OC::Cm::CMError put( int &requestId,
                                             std::map<std::string, std::string> *queryParams, OC::Cm::Serialization::ISerializable *data,
                                             OC::Cm::Client::Resource::IResourceResponseListener &listener);



                        /**
                         * This method sends Post request to the resource. This is an asynchronous method. Response of
                         * this request can be received through
                         * OC::Cm::Client::Resource::IResourceResponseListener::OnPostResponseReceived()
                         *
                         * @param[out] requestId request identifier
                         * @param[in] queryParams   query parameters
                         * @param[in] data          request payload
                         * @param[in] listener      response listener
                         *
                         * @return returns OC::Cm::CMError object with code CM_SUCCESS on success @n
                         *                 OC::Cm::CMError object with error code, error description if available on failure
                         *
                         *  @see OC::Cm::Client::Resource::IResourceResponseListener::OnPostResponseReceived()
                         */
                        OC::Cm::CMError post( int &requestId,
                                              std::map<std::string, std::string> *queryParams,
                                              OC::Cm::Serialization::ISerializable *data,
                                              OC::Cm::Client::Resource::IResourceResponseListener &listener);



                        /**
                         * This method sends delete request to the resource. This is an asynchronous method. Response of
                         * this request can be received through
                         * OC::Cm::Client::Resource::IResourceResponseListener::onDeleteResponseReceived()
                         *
                         * @param[out] requestId request identifier
                         * @param[in] queryParams   query parameters
                         * @param[in] listener      response listener
                         *
                         * @return  returns @c true if request is sent successfully @n
                         *                  @c false in case of any error
                         *
                         * @see OC::Cm::Client::Resource::IResourceResponseListener::onDeleteResponseReceived()
                         */
                        OC::Cm::CMError deleteResource( int &requestId,
                                                        std::map<std::string, std::string> *queryParams,
                                                        OC::Cm::Client::Resource::IResourceResponseListener &listener);



                        /**
                         *
                         * This method is used to subscribe notification for this resource. This is an asynchronous method. Response of
                         * this request can be received through
                         * OC::Cm::Client::Resource::IResourceResponseListener::onSubscribeResponseReceived()
                         *
                         * @param[out] requestId request identifier
                         * @param[in] dUuid uuid of the device to which this request is being sent
                         * @param[in] sUuid uuid of self device
                         * @param listener              listener to receive response of this request
                         * @param[in] description description of the Subscription object
                         * @return returns OC::Cm::CMError object with code CM_SUCCESS on success @n
                         *                 OC::Cm::CMError object with error code, error description if available on failure
                         *
                         * @see OC::Cm::Client::Resource::IResourceResponseListener::onSubscribeResponseReceived()
                         */
                        OC::Cm::CMError subscribe( int &requestId, std::string &dUuid, std::string &sUuid,
                                                   OC::Cm::Client::Resource::IResourceResponseListener &listener, std::string description);


                        /**
                         *
                         * This method is used to subscribe notification for this resource. This is an asynchronous method. Response of
                         * this request can be received through
                         * OC::Cm::Client::Resource::IResourceResponseListener::onSubscribeResponseReceived()
                         *
                         * @param[out] requestId request identifier
                         * @param listener              listener to receive response of this request
                         * @param[in] description description of the Subscription object
                         * @return returns OC::Cm::CMError object with code CM_SUCCESS on success @n
                         *                 OC::Cm::CMError object with error code, error description if available on failure
                         *
                         * @see OC::Cm::Client::Resource::IResourceResponseListener::onSubscribeResponseReceived()
                         */
                        OC::Cm::CMError subscribe( int &requestId,
                                                   OC::Cm::Client::Resource::IResourceResponseListener &listener, std::string description);


                        /**
                         *
                         * This method is used to unsubscribe notifications for this resource. This is an asynchronous method. Response of
                         * this request can be received through
                         * OC::Cm::Client::Resource::IResourceResponseListener::onUnSubscribeResponseReceived()
                         *
                         * @param[out] requestId request identifier
                         * @param[in] uuid uuid of the device to which this request is being sent
                         * @param listener              listener to receive response of this request
                         * @return returns OC::Cm::CMError object with code CM_SUCCESS on success @n
                         *                 OC::Cm::CMError object with error code, error description if available on failure
                         *
                         * @see OC::Cm::Client::Resource::IResourceResponseListener::onUnSubscribeResponseReceived()
                         */
                        OC::Cm::CMError unSubscribe( int &requestId, std::string &uuid,
                                                     OC::Cm::Client::Resource::IResourceResponseListener &listener);

                        /**
                         *
                         * This method is used to unsubscribe notifications for this resource. This is an asynchronous method. Response of
                         * this request can be received through
                         * OC::Cm::Client::Resource::IResourceResponseListener::onUnSubscribeResponseReceived()
                         *
                         * @param[out] requestId request identifier
                         * @param listener              listener to receive response of this request
                         * @return returns OC::Cm::CMError object with code CM_SUCCESS on success @n
                         *                 OC::Cm::CMError object with error code, error description if available on failure
                         *
                         * @see OC::Cm::Client::Resource::IResourceResponseListener::onUnSubscribeResponseReceived()
                         */
                        OC::Cm::CMError unSubscribe( int &requestId,
                                                     OC::Cm::Client::Resource::IResourceResponseListener &listener);

                        /**
                         *
                         * Configures filter query parameter
                         *
                         * @param[in] filter value of filter query parameters
                         *
                         * @return  returns @c true if request is sent successfully @n
                         *                  @c false in case of any error
                         *
                         * @see OC::Cm::Client::Resource::Resource::unSetFilter()
                         */
                        bool setFilter ( std::string filter ) ;

                        /**
                         *
                         * removes previously configured filter parameter
                         *
                         *
                         * @return  returns @c true if request is sent successfully @n
                         *                  @c false in case of any error
                         *
                         * @see OC::Cm::Client::Resource::Resource::setFilter()
                         */
                        bool unSetFilter ( ) ;


                        /**
                         *
                         * Configures recursive query parameter
                         *
                         * @param[in] recursive value of recursive query parameters
                         *
                         * @return  returns @c true if request is sent successfully @n
                         *                  @c false in case of any error
                         *
                         */
                        bool setRecursive (bool recursive) ;

                        /**
                         *
                         * returns resource path
                         *
                         * @return  returns resource path
                         *
                         */
                        std::string getResourcePath() ;


                        /**
                         * configures resource relative path
                         *
                         * @param[in] resourcePath relative path of this resource
                         *
                         *
                         */
                        void setResourcePath( std::string resourcePath ) ;


                        /**
                         *  forces framework to use xsd classes used by application for Control Manager requests/responses which are handled by framework. (Ex: Subscription)
                         */
                        bool forceApplicationSerializables ;

                    private:

                        std::string m_deviceAddress;

                        std::string m_resourceId;

                        IContext  *p_context ;

                        std::string m_filter ;

                        bool        recursive ;

                        std::string  m_protocol ;
                };
                /** @} */
            }
        }
    }
}

/** @} */

#endif  //_RESOURCE_H
