//******************************************************************
//
// Copyright 2014 Samsung Electronics All Rights Reserved.
//
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=



#if !defined(_INOTIFICATIONLISTENER_H)
#define _INOTIFICATIONLISTENER_H

#include "string"
#include "CMConfig.h"

// Forward Declarations...
namespace OC
{
    namespace Cm
    {
        class Device ;

        namespace Serialization
        {
            class ISerializable ;
        }
    }
}

namespace OC
{
    namespace Cm
    {
        namespace Notification
        {
            /**
            *  @addtogroup Notification
            *  @{
            */
            /**
             * @interface   INotificationListener
             * @brief       Listener for Control Manager Notifications which are subscribed
             *
             * @since       1.0
             *
             * This interface provides listener methods to receive Control Manager Notifications.
             * To receive events through this listener application first needs to subscribe to intended
             * notifications using OC::Cm::Client::Resource::Resource::subscribe().
             *
             * Application needs to type cast the notification data to corresponding data class generated by
             * Control Manager-SDK. Control Manager-SDK also generates resource specific listener interfaces. It is advisable to use
             * these resource specific listener interfaces to avoid type casting
             *
             * @note using this interface application can receive notifications to which it subscribed already.
             * @note to receive multicast events, use OC::Cm::IControlManagerListener::onMulticastedNotifcationReceived()
             *
             * @code
             *
             *
             * //Sample code for Notification listener
             *
             * class MyNoficationsListener :
             *          public INotificationListener {
             *
             *      MyNoficationsListener() {}
             *      ~MyNoficationsListener() {}
             *
             *      void onNotificationReceived( const OC::Cm::Device& device,
                                                     std::string& resource,
                                                     std::string& elementType,
                                                     OC::Cm::Serialization::ISerializable& notification )
             *      {
             *          //Received a Notification..
             *      }
             *
             * }
             *
             * class MySubscriptionResponseListener :
             *          public OC::Cm::Client::Resource::IResourceResponseListener
             * {
             *      void onSubscribeResponseReceived( int requestId, int status )
             *      {
             *          //Received Subscription Response..
             *      }
             * }
             *
             *
             * //Sample code to register a listener
             *
             * void int subscribeResource( OC::Cm::Client::Resource::Resource& temperatureResource )
             * {
             *      // Subscribe a listener to receive all notification
             *
             *      OC::Cm::ControlManager*pShp = OC::Cm::ControlManager::getInstance() ;
             *      OC::Cm::Notification::ISubscriptionManager* pSubscripionManager = pShp->getSubscriptionManager();
             *      MyNoficationsListener *listener = new MyNoficationsListener();
             *
             *      pSubscripionManager->addNotificationListener(listener) ;
             *
             *      // Send Subscribe request
             *      MySubscriptionResponseListener *subscirptionResponseListener = new MySubscriptionResponseListener() ;
             *      int requestId ;
             *
             *      temperatureResource.subscribe(  requestId, myUuid, peerUuid, subscirptionResponseListener,description );
             * }
             *
             *
             *
             * @endcode
             *
             */
            class CMAPI INotificationListener
            {

                public:

                    /**
                     *  Default destructor of this class.
                     */
                    virtual ~INotificationListener() {}

                    /**
                     * Listener for Control Manager Notifications
                     *
                     * @param[in] uuid          device UUID from which the notification is received
                     * @param[in] resource      resource path
                     * @param[in] eventType     Type of the event (Created, Deleted, Notified)
                     * @param[in] notification  notification data
                     * @param[in] subscriptionURI   subscriptionURI
                     * @param[in] eventTime eventTime
                     *
                     * @note Application needs to type cast the notification data to corresponding data class generated
                     * by Control Manager SDK using  OC::Cm::Serialization::ISerializable::getElementName().
                     *
                     * @see OC::Cm::Client::Resource::Resource::subscribe()
                     * @see OC::Cm::Serialization::ISerializable::getElementName()
                     */
                    virtual void onNotificationReceived( std::string &uuid,
                                                         std::string &resource,
                                                         std::string &eventType,
                                                         OC::Cm::Serialization::ISerializable *notification,
                                                         std::string &subscriptionURI,
                                                         OC::Cm::Serialization::Xsd::DateTimeType *eventTime ) = 0;


                    /**
                     * This method will be invoked when framework receives a multicast notification
                     *
                     * @param device    device from which notification received
                     * @param elementType   Type of the resource
                     * @param notification  notification data
                     *
                     * @note Application needs to type cast the notification data to corresponding data class generated
                     * by Control Manager SDK using elementType.
                     */
                    virtual void onMulticastedNotifcationReceived( const OC::Cm::Device &device,
                            const std::string &elementType,
                            const OC::Cm::Serialization::ISerializable *notification ) = 0;

            };
            /** @} */
        }
    }
}

#endif  //_INOTIFICATIONLISTENER_H
