/******************************************************************
 *
 * Copyright 2014 Samsung Electronics All Rights Reserved.
 *
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ******************************************************************/

#ifndef WEBSERVICE_RESOURCE_REQUEST_HANDLER_H_
#define WEBSERVICE_RESOURCE_REQUEST_HANDLER_H_

#include <map>
#include <string>
#include <vector>

#include "abstract_resource/simple_root.h"
#include "base/synchronization/lock.h"
#include "base/values.h"
#include "base/version.h"
#include "base_resource/base_simple_object.h"
#include "http_header/http_header_defined.h"
#include "http_header/http_request_header.h"
#include "http_header/http_response_header.h"
#include "http_start_line/http_request_line.h"
#include "http_start_line/http_status_code_defined.h"
#include "http_header.h"

namespace webservice
{

    class ResourceRequestHandler
    {
        public:
            /**
               * Returns pointer to ResourceRequestHandler singleton object
               * @param void
               * @return ResourceRequestHandler*
               */
            static webservice::ResourceRequestHandler *GetInstance(void);

            /**
               * Initializes the rest framework module
               * @param void
               * @return bool
               */
            bool Init(void);

            /**
               * Un-initializes the rest framework module
               * @param void
               * @return bool
               */
            bool DeInit(void);

            /**
               * Deletes ResourceRequestHandler singleton object
               * @param void
               * @return void
               */
            static void DestroyInstance(void);

            /**
               * Processes the URI request and updates o/p parameter
               *                   (response_code, content_type) with result
               * @param[in] req_type : http request type
               * @param[in] req_uri : request uri
               * @param[in] query_parameters : http query params
               * @param[in] req_body : json request body
               * @param[in] header_request_info : extra http header information
               * @param response_code : http response code
               * @param header_response_info : http response headers from SLEP
               * @return string
               */
            web_util::RestResponse ProcessRequest(int req_type, std::string req_uri,
                                                  std::string query_parameters,
                                                  std::string req_body,
                                                  const web_util::HttpHeaderData &http_request_info, int *response_code,
                                                  web_util::HttpHeaderData *http_response_info, std::string *response);
            /**
             * Process the http request by virtual
             * "virtual" means that http request command is executed one more time just by using req_type(Get), saved URI and saved session_id to get the response body
             * in longpoll response body
             * @param[in] req_type : http request type (web_util::HTTP_METHOD_GET)
             * @param[in] req_uri : request uri
             * @param[in] session_id : string
             * @param[in] version : string, client API version
             * @param[out] response_code : http response code
             * @param[out] is_valid_uri : true if the uri is valid, else false
             * @return response : string
             */
            std::string VirtualProcessRequest(const int req_type, const std::string &req_uri,
                                              const std::string &session_id,
                                              const std::string &version, std::string *etag, int *response_code);

        private:
            /**
               * Function pointer to functions which are generated by script
               */
            static void RegisterDefaultResources(void);

            /**
               * Processes the URI request and updates o/p parameter
               *                   (response_code, content_type) with result
               * @param[in] request_line : http request (type, uri, query parameter)
               * @param[in] request_header : http request header
               * @param[in] request_body : request body
               * @param[out] response_header : http response header
               * @param[out] response_code : http status code
               * @return string
               */
            std::string ProcessRequestObject(const HTTPRequestLine &request_line,
                                             const HTTPRequestHeader &request_header,
                                             const std::string &request_body, HTTPResponseHeader &response_header, int *response_code);

            /**
               * Parse http request body to dictionary type from string type
               * @param[in] request_line : http request (type, uri, query parameter)
               * @param[in] request_header : http request header
               * @param[in] in_request_body : request body
               * @param[out] out_request_body : type casting to dictionary type
               * @return HTTPResponseType
               */
            HTTPResponseType ParseRequestBody(const HTTPRequestLine &request_line,
                                              const HTTPRequestHeader &request_header,
                                              const std::string &in_request_body, base::DictionaryValue **out_request_body);

            /**
               * Find object using uri
               * URI is similar with tree structure, so this is finding leaf of tree.
               * @param[in] uri_fields : uri which is -redefined to vector type
               * @param[out] id_deps : save id for identified object
               * @return BaseSimpleObject ptr
               */
            BaseSimpleObject *FindSimpleObject(const std::vector<std::string> uri_fields,
                                               std::map<std::string, std::string> &id_deps, HTTPMessage *http);

            /**
               * Make http response data
               * @param[in] request_header : http request header, this need to negotiate content type
               * @param[in] in_response_body : response body which is defeined to Dictionary type
               * @param[in] response_error_code : internally error type
               * @param[out] response_status_code : http status code for response
               * @param[out] response_header : http response header
               * @return string : made response data for http response
               */
            std::string MakeResponseObject(const HTTPRequestHeader &request_header,
                                           const base::DictionaryValue *const in_response_body,
                                           HTTPResponseType response_error_code, int *response_status_code,
                                           HTTPResponseHeader &response_header);

            /**
               * Set supportable SHP version
               * This is for server(gateway/controllee), so this should be called only once in ResourceRequestHandler::GetInstance.
               * @param[in] p_this : this is static function, so we need own pointer.
               * @return void
               */
            static void SetSupportableSHPVersion(ResourceRequestHandler *p_this);

            /**
                * This is for checking the API version ( in the "X-API-VERSION" field in HTTP header data )
                * @param[in] client_version : this is client version which is get in "X-API-VERSION".
                * @param[out] response_header : this is to set shp version to http response header
                * @return bool
                */
            bool IsVersionValidity(const std::string &client_version, HTTPResponseHeader &response_header);

            /**
                * This is for checking session id ( in the "X-API-SessionID" field in HTTP header data )
                * @param[in] request_line : this use to set request method and request uri.
                * @param[in] session_id : this is for checking session id
                * @return bool
                */
            bool IsSessionValidity(const HTTPRequestLine &request_line, const std::string &session_id);

            /* instance for ResourceRequestHandler class, this class consist of singletone */
            static webservice::ResourceRequestHandler *resource_handler_instance_;

        public:
            /* this is similar with root of tree. */
            static SimpleRoot *root_object_;

        private:
            /* supportable minimum shp version, this mean supporatable shp version of this product */
            BaseVersion supportable_version_min_;
            /* supportable maximum shp version, this mean supporatable shp version of this product */
            BaseVersion supportable_version_max_;
            /* auto lock to find simple object */
            base::Lock lock_for_simple_object_;
            /* Rest fw state */
            static web_util::RestFwState rest_fw_state_;
    };
}

#endif /* WEBSERVICE_RESOURCE_REQUEST_HANDLER_H_ */

