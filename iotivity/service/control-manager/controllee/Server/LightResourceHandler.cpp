//******************************************************************
//
// Copyright 2014 Samsung Electronics All Rights Reserved.
//
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

#include "LightResourceHandler.h"
#include "log.h"

LightResourceHandler::LightResourceHandler(OC::Cm::IContext *pContext) :
    OC::Cm::Server::ResourceHandler::SyncResourceHandler(pContext)
{
}

LightResourceHandler::~LightResourceHandler()
{
}

bool LightResourceHandler::handleSyncResource(std::string methodId,
        int &statusCode, OC::Cm::Serialization::ISerializable *request,
        OC::Cm::Serialization::ISerializable *response)
{

    CE(printf("Entering LightResourceHandler::handleSyncResource \n"));


    if (0 == methodId.compare("GET"))
    {
        if (false
            == OC::Cm::Server::ResourceHandler::SyncResourceHandler::validateRepresentation(
                response, EN_LIGHT))
        {
            statusCode = 404;
            return true;
        }
        this->onGET(statusCode, (::Light *) response);
    }
    else if (0 == methodId.compare("PUT"))
    {
        if (false
            == OC::Cm::Server::ResourceHandler::SyncResourceHandler::validateRepresentation(
                request, EN_LIGHT))
        {
            statusCode = 404;
            return true;
        }
        this->onPUT(statusCode, (::Light *) request);
    }
    else
    {
        statusCode = 405;
    }

    return true;
}

bool LightResourceHandler::onGET(int &statusCode, ::Light *respData)
{
    // TODO: Autogenerated code. Add Resource implementation here
    // TODO: Default Status Code is: 501 - Not Implemented.  Replace Default Status Code based on implementation!
    //statusCode = 501;
    OnType *mOnType = new OnType();
    mOnType->value = "On";
    respData->mpLightPower = mOnType;

    respData->mpDimmingLevel = new uint8_t(100);
    respData->mpMaxDimmingLevel = new uint8_t(255);
    respData->mpRelativeDimmingLevel = new int16_t(0);
    respData->mpTransitionTime = new uint16_t(3);

    String50 *mpActivate = new String50();
    mpActivate->value = "1";
    respData->mpActivatePatternID = mpActivate;

    String50 *mpOnPattern = new String50();
    mpOnPattern->value = "2";
    respData->mpOnPatternID = mpOnPattern;

    Color *mColor = new Color();
    mColor->mpHue = new uint8_t(50);
    mColor->mpSaturation = new uint8_t(20);
    mColor->mpRelativeHue = new int16_t(10);
    mColor->mpRelativeSaturation = new int16_t(100);
    mColor->mpChromaticityX = new uint16_t(15);
    mColor->mpChromaticityY = new uint16_t(20);
    mColor->mpColorTemperature = new uint16_t(25);
    respData->mpColor = mColor;

    statusCode = 200;
    return true;
}

bool LightResourceHandler::onPUT(int &statusCode, ::Light *reqData)
{
    // TODO: Autogenerated code. Add Resource implementation here
    // TODO: Default Status Code is: 501 - Not Implemented.  Replace Default Status Code based on implementation!
    //statusCode = 501;
    OnType *mOnType = new OnType();
    mOnType->value = "On";
    reqData->mpLightPower = mOnType;

    reqData->mpDimmingLevel = new uint8_t(111);
    reqData->mpMaxDimmingLevel = new uint8_t(255);
    reqData->mpRelativeDimmingLevel = new int16_t(0);
    reqData->mpTransitionTime = new uint16_t(3);

    String50 *mpActivate = new String50();
    mpActivate->value = "1";
    reqData->mpActivatePatternID = mpActivate;

    String50 *mpOnPattern = new String50();
    mpOnPattern->value = "2";
    reqData->mpOnPatternID = mpOnPattern;

    Color *mColor = new Color();
    mColor->mpHue = new uint8_t(50);
    mColor->mpSaturation = new uint8_t(20);
    mColor->mpRelativeHue = new int16_t(10);
    mColor->mpRelativeSaturation = new int16_t(100);
    mColor->mpChromaticityX = new uint16_t(15);
    mColor->mpChromaticityY = new uint16_t(20);
    mColor->mpColorTemperature = new uint16_t(25);
    reqData->mpColor = mColor;

    statusCode = 200;
    return true;
}
